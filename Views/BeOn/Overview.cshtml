@model IEnumerable<Device>
@{
    ViewData["Title"] = "Overview";
    Layout = "~/Views/Shared/_layoutBeonPrincipal.cshtml";
    IEnumerable<Device> devices = Model;


}

<section class="d-flex flex-column-reverse flex-lg-row">

<article class="container-fluid p-0">

    <div class="card m-3 m-lg-3 ">
        <div class="card-header pb-0 " style=" color: #201063;">
            <h5 class="card-title " style="font-weight: bold;"><i class="fas fa-map-marked"></i> Overview</h5>
        </div>
        <div class="card-body">
            <div id="overview"></div>
        </div>
    </div>
</article>
<aside class="d-flex flex-column flex-lg-row-reverse m-3 m-lg-0 mt-lg-3 mb-lg-3 p-0  ">
    <div class="h-100 p-0 mr-2 text-center" >
        <a class="btn btn-light border h-100  " data-bs-toggle="collapse" href="#alertCollapse" role="button" aria-expanded="false" aria-controls="alertCollapse" onclick="ChangeArrow()"><span class="position-relative d-none d-lg-flex" style="top:50%;"><i class="fas fa-arrow-left"  id="arrowLeft"></i><i class="fas fa-arrow-right d-none" id="arrowRight"></i>&nbsp<i class="far fa-bell "></i></span><span class="position-relative d-flex d-lg-none " style="top:50%;"><i class="fas fa-arrow-down" id="arrowDown"></i><i class="fas fa-arrow-up d-none" id="arrowUp"></i>&nbsp<i class="far fa-bell "></i></span></a>
    </div>
    <div class="row" style="">
        <div class="col">
            <div class="collapse" id="alertCollapse">
                <div class="card card-body" style="height: 88vh;  overflow-y: scroll;">
                    @{
                        string flag = "";
                        foreach (var device in devices)
                        {
                            if (device.EnvironmentPayloads.Count != 0)
                            {

                                IEnumerable<EnvironmentPayload> environmentPayloadsOrderByAsc = device.EnvironmentPayloads.OrderBy(a => a.TimestampEvent);
                                EnvironmentPayload environment = environmentPayloadsOrderByAsc.Last();
                                IEnumerable<EnvironmentPayload> env72alert = environmentPayloadsOrderByAsc.Where(e => e.TimestampEvent > environment.TimestampEvent.AddHours(-72));


                                foreach (var env in env72alert)
                                {

                                    if ((env.EventType == "1" || env.EventType == "2" || env.EventType == "3") && flag != device.DeviceId)
                                    {
                                        <div>
                                                                <p>
                                                                    Device:
                                                                                        <a asp-controller="Beon" asp-action="Dashboard" asp-route-IdDevice="@device.DeviceId"> @device.DeviceId</a>
                                                                </p>
                                        </div>
                                        <div class="dropdown-divider"></div>
                                        flag = device.DeviceId;
                                    }
                                    if (env.EventType == "1")
                                    {

                                        <div>
                                            <p class=" alertcolorred fas fa-temperature-high">Alert temperature    -   @env.TimestampEvent</p>
                                        </div> }
                                    else if (env.EventType == "2")
                                    {
                                        <div>
                                            <p class="alertcolorgreen fas fa-temperature-high"> Alert temperature terminée   -   @env.TimestampEvent</p>
                                        </div> }
                                    else if (env.EventType == "3")
                                    {
                                        <div>
                                            <p class="alertcolorblue fas fa-exclamation-triangle"> Alert Shock    -   @env.TimestampEvent</p>
                                        </div> }
                                    else
                                    {
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</aside>
</section>
<script type="text/javascript">
    function ChangeArrow() {
        document.getElementById("arrowLeft").classList.toggle("d-none");
        document.getElementById("arrowRight").classList.toggle("d-none");
        document.getElementById("arrowUp").classList.toggle("d-none");
        document.getElementById("arrowDown").classList.toggle("d-none");
    }
let devicesEnvironmentInfos = new Array();
@{string latitude = "43.7384";
        string longitude = "7.4246";
        double sMax = 0;
        double totalShock = 0;
        String lastContact = "";
        Int32 tMean = 0;
        Int32 batteryLvl = 0;
}
@{ foreach (Device device in devices)
    {
        if (device.EnvironmentPayloads.Count != 0)
        {

            IEnumerable<EnvironmentPayload> environmentPayloads = device.EnvironmentPayloads.OrderByDescending(e => e.TimestampEvent);
            double latitudeDouble = Math.Round(environmentPayloads.First().ComputedLatitude, 6);
            double longitudeDouble = Math.Round(environmentPayloads.First().ComputedLongitude, 6);
            latitude = latitudeDouble.ToString().Replace(',', '.');
            longitude = longitudeDouble.ToString().Replace(',', '.');
            lastContact = environmentPayloads.First().TimestampEventToString;
            sMax = environmentPayloads.First().Smax;
            totalShock = environmentPayloads.First().TotalShock;
            tMean = environmentPayloads.First().Tmean;
            batteryLvl = Convert.ToInt32(environmentPayloads.First().Batterylvl);
        }
        else if (device.PositionningPayloads.Count != 0)
        {
            IEnumerable<PositionningPayload> positionningPayloads = device.PositionningPayloads.OrderByDescending(e => e.TimestampEvent);
            double latitudeDouble = Math.Round(positionningPayloads.First().ComputedLatitude, 6);
            double longitudeDouble = Math.Round(positionningPayloads.First().ComputedLongitude, 6);
            latitude = latitudeDouble.ToString().Replace(',', '.');
            longitude = longitudeDouble.ToString().Replace(',', '.');
            sMax = 0;
            totalShock = 0;
            lastContact = "no environment info";
            tMean = 0;
            batteryLvl = 0;
        }
        else
        {
            latitude = " 43.5333";
            longitude = " 1.35366";
            sMax = 0;
            totalShock = 0;
            lastContact = "no environment and positionning info";
            tMean = 0;
            batteryLvl = 0;
        }

        <Text>
            var deviceInfos = ('"@device.DeviceId": {"lat":' +  @latitude + ',"lon":' + @longitude + ',"batteryLvl":' + @batteryLvl +',"sMax":' + @sMax  + ',"totalShock":' + @totalShock  + ',"tMean":' + @tMean + ',"lastContact": "@lastContact"}');
            devicesEnvironmentInfos.push(deviceInfos);
        </Text>
    }
}
</script>
<script src="~/js/scriptOverview.js"></script>